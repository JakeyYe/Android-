char数据类型变量赋值只能是一个字符，如char c='a'这样是对的,char s='abc'这样就是错的，会产生Invalid character constant(无效的字符常量)的错误。
//lenth()函数是返回用16位unicode编码的个数。
Java中无论是汉字还是英文字母都是用Unicode编码来表示的，一个Unicode码是16位，每字节是8位，所以一个Unicode码占两字节。但是英文字母比较特殊，源自于8位（1字节）的ASCII码，于是在Unicode码仅使用了低8位（1字节）就可以表示，高8位的话不使用也无所谓。所以

char c='a'; 
System.out.println(c.getBytes().lenth()),得到的是1（字节）

但汉字就完整地使用了16位（2字节）的Unicode，所以
char c='中'; 
System.out.println(c.getBytes().lenth()),得到的是2（字节）

综上，c='a'在内存中确实只占1字节，但这不意味着String s="abc"在内存中只占3字节。应该这么说，String s="abc"至少在内存中占3字节。这是因为char是基本数据类型，而String确是对象类型。对象是一种很复杂的数据类型，你要看一个对象具体占多少字节，可以把这个对象序列化后存入一个文本文件来看它具体占用了多少字节，当然这也不是精确的，因为序列化需要写入少量系统信息，但大致是对的。

byte b=128;这样是错的，数值超出了byte的范围;byte b=(byte)128;这样是对的，最后值为-128.（注意byte的范围-128~127）.

Java 声明String类型变量，注意直接通过赋值的方式实例化的，要注意对象池，相同值的变量内存地址不一定相同的
String a="ava"这种创建变量方式，是放在对象池里的，String b=new String("avaevw");这种创建变量的方式是放在堆中的。String 不是基本数据类型，还是不可变对象，只要发生改变就会重新创建一个变量对象。

break关键字，也只能跳出一层循环，如果是两层循环，在里层循环执行break语句，也只能跳出里层的循环。

类是单继承的（包括抽象类），而接口是多继承的，如interface bbb extends aaa,bbb{},aaa和bbb都是接口。如果类可以多继承，实例化时，如果要调用父类的方法，如果不同的父类中有两个方法一样，这样就不知道该调用那个父类的方法；但是接口中就不一样了，接口可以继承一个或多个接口（不能继承类），因为接口继承多个接口，就算多个接口中有相同的方法，但是最终实现接口的类就只能实现一个而且@Override一个方法，所以调用时就不会有问题。接口继承接口只能使用extends关键字，而不能使用implements关键字。


博客记录http://blog.csdn.net/wolfofsiberian/article/details/39403207